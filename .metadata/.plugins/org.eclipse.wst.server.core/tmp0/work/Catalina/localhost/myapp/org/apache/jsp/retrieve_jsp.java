/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.7
 * Generated at: 2023-05-09 10:51:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.*;

public final class retrieve_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <title>DM발송내역 조회</title>\n");
      out.write("    <style>\n");
      out.write("        body, th, td {font-size: 24pt;}\n");
      out.write("        table, th, td {border: 1px solid black; text-align: center;}\n");
      out.write("    </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
  
    request.setCharacterEncoding("utf-8");

    String user = (String) session.getAttribute("user");
    if (user == null) {
        response.sendRedirect("register.jsp");
        return;
    }

    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        Connection conn = DriverManager.getConnection( "jdbc:mysql://localhost:3306/mydb?serverTimezone=UTC&useUnicode=true&characterEncoding=UTF-8", "root", "dbqls5077@");
        
        // cl, dm table 생성 및 초기 데이터 등록
        Statement stmt = conn.createStatement();
        stmt.executeUpdate("DROP TABLE IF EXISTS cl");
        stmt.executeUpdate("DROP TABLE IF EXISTS dm");
        stmt.executeUpdate("CREATE TABLE cl (cid INT PRIMARY KEY, name VARCHAR(10), area VARCHAR(10))");
        stmt.executeUpdate("CREATE TABLE dm (dmno INT PRIMARY KEY, cid INT, dmdate VARCHAR(10), FOREIGN KEY(cid) REFERENCES cl(cid))");
        stmt.executeUpdate("INSERT INTO cl (cid, name, area) VALUES (1, '이순신', '대전'), (2, '안중근', '서울'), (3, '정약용', '서울')");
        stmt.executeUpdate("INSERT INTO dm (dmno, cid, dmdate) VALUES (1, 2, '0301'), (2, 3, '0401'), (3, 1, '0501'), (4, 2, '0601')");

        // dm 테이블과 cl 테이블을 natural join한 결과를 가져옴
        pstmt = conn.prepareStatement("SELECT * FROM dm NATURAL JOIN cl ORDER BY dmno");
        ResultSet rs = pstmt.executeQuery();

    

      out.write("\n");
      out.write("\n");
      out.write("<div align=\"center\">\n");
      out.write("[DM발송내역 조회]\n");
      out.write("<table>\n");
      out.write("	<tr><th>DM발송번호</th><th>고객이름</th><th>고객거주지역</th><th>DM발송일</th></tr>\n");

	if (rs != null) {
		while (rs.next()) { dmno = rs.getInt("dmno"); name = rs.getString("name"); area = rs.getString("area"); dmdate = rs.getString("dmdate"); 
      out.write("\n");
      out.write("			<tr><td>");
      out.print(dmno);
      out.write("</td><td>");
      out.print(name);
      out.write("</td><td>");
      out.print(area);
      out.write("</td><td>");
      out.print(dmdate);
      out.write("</td></tr> \n");
		}
		rs.close(); conn.close();
	}

      out.write("\n");
      out.write("</table>\n");
      out.write("</div>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
